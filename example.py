from akitaplot import table, plot, workflow

class visual_table(table):
  def manipulation(self):
    # The origin table is detailed and easy-to-read, generated by upstream
    # class model instances. And the downstream table is used for generate 
    # plot by seaborn module. So a process called manipulation is needed to 
    # transform the origin one to downstream.
    # Here is an example of speedup scheme. 
    self.downstream = self.origin.copy()

    bl = self.get_baseline_name()
    model_labels = self.model_labels()
    # Make sure baseline locates at index 0
    for m_name in reversed(model_labels):
      self.downstream[m_name] = self.downstream[bl] / self.downstream[m_name]

    bm = 'Benchmark'
    self.downstream[bm] = self.downstream.index
    self.downstream = self.downstream.melt(id_vars=[bm], 
                                           value_vars=model_labels)
    self.downstream[bm] = self.downstream[bm].str.upper()
    self.downstream.columns = ['Benchmark', 'Configuration', 'Speedup']

    print(self)

  def benchmarks_order(self):
    # Customize the display order in plot x-axis.
    return self.default_benchmarks_order()

class visual_plot(plot):
  # Customize the plot config here.
  font_scale = 2.0
  def decorate(self):
    # Customize the plot using self.ax directly.
    pass


class visual(workflow):
  # Implement the interface of `transform_table` to use customized table.
  def transform_table(self, table_name, dfs_for_table):
    return visual_table(table_name, dfs_for_table)
  
  # Implement the interface of `transform_plot` to use customized plot.
  def transform_plot(self, plot_name, table):
    return visual_plot(plot_name, table, figure_size=(10, 2))

if __name__ == '__main__':
  v = visual('./config.yaml')
  v.dump_tables()
